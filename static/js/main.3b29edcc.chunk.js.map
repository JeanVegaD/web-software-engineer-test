{"version":3,"sources":["components/header.js","utils/treeNode.js","utils/transformArray.js","components/inputArray.js","utils/transformJson.js","components/outputJson.js","components/output.js","components/footer.js","pages/index.js","reportWebVitals.js","index.js"],"names":["Header","className","onClick","window","open","TreeNode","id","left","right","this","node","depth","parent","hasChildren","tempLeft","getDeeperNodeAux","tempRight","isDeepest","validateNode","element","validateArray","array","flag","Array","isArray","length","validateSingleArray","createDataStrcuture","parseArray","JSON","stringify","InputArray","inputArr","inputArrError","setInputArr","setInputArrError","setInputJson","handleSetFieldsetInputArrError","value","useEffect","htmlFor","type","name","onChange","event","target","parse","e","disabled","sampleData1","sampleData2","validateJson","json","object","keys","Object","values","validateSingleKey","parseJson","pJson","OutputJson","inputJson","inputJsonError","setInputJsonError","setBinTree","rows","binTree","Output","getDeeperNode","parseBinTree","href","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b29edcc.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nimport \"../styles/header.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"navbar-wrapper\">\r\n                <div className=\"navbar\">\r\n                    <h1>Web Software Engineer Test</h1>\r\n                </div>\r\n            </div>\r\n        <div className=\"header-wrapper\">\r\n            <div className=\"header\">\r\n                <h1>About this test</h1>\r\n                <p>In the following test, a series of problems that web developers face every day will be exposed. \r\n                <br /> With it, problem solving skills will be put to the test using the most advanced web technology, to give users the best possible experience.</p>\r\n                <button\r\n                    onClick={() => window.open('https://github.com/JeanVegaD/web-software-engineer-test/blob/master/README.md', \"_blank\")}\r\n                >\r\n                    Read more\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Header;","\r\nclass TreeNode {\r\n  constructor(id,left,right) {\r\n    this.id = id \r\n    if(left != null && right != null){\r\n      this.left = left\r\n      this.right = right\r\n    }\r\n    else if(left != null && right == null){\r\n      this.left = left\r\n    }\r\n    else if(left === null && right != null){\r\n      this.left = null\r\n      this.right = right\r\n    }\r\n  }\r\n\r\n  get getID(){\r\n    return this.id\r\n  }\r\n\r\n  get getLeft(){\r\n    return this.left\r\n  }\r\n\r\n  get getRight(){\r\n    return this.right\r\n  }\r\n\r\n  hasChildren(node){\r\n    if(node){\r\n      if(node.left || node.right){\r\n        return true \r\n      }else{\r\n        return false\r\n      }\r\n    }else{\r\n      return false\r\n    }\r\n    \r\n  }\r\n\r\n  getDeeperNodeAux(node,depth,parent){\r\n    node.depth = depth\r\n    node.parent = parent\r\n    if(this.hasChildren(node)){\r\n      let tempLeft = node.left? this.getDeeperNodeAux(node.left, depth + 1 , node) : null\r\n      let tempRight = node.right? this.getDeeperNodeAux(node.right, depth + 1 , node) : null\r\n      \r\n      if(tempLeft === null){\r\n        return tempRight\r\n      }\r\n      else if (tempRight === null){\r\n        return tempLeft\r\n      }\r\n      else if(tempLeft.depth === tempRight.depth){\r\n        node.depth = tempLeft.depth\r\n        return node\r\n      }\r\n      else if(tempLeft.depth > tempRight.depth){\r\n        return tempLeft\r\n      }\r\n      else {\r\n        return tempRight \r\n      }\r\n    }else{\r\n      return node\r\n    }\r\n  }\r\n\r\n  getDeeperNode(){\r\n    this.getDeeperNodeAux(this,0,this).isDeepest = true\r\n  }\r\n}\r\n\r\nexport default TreeNode;","import TreeNode from './treeNode';\r\n\r\nconst validateNode = (element) => {\r\n    if(typeof element === \"string\" || typeof element === \"number\"){\r\n        return true\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\nconst validateSingleArray = (array) => {\r\n    if(Array.isArray(array)){\r\n        if(array.length === 1)\r\n            return validateNode(array[0])\r\n        else if(array.length === 2)\r\n            return (validateNode(array[0])  && Array.isArray(array[1]))\r\n        else if(array.length === 3){\r\n            return (\r\n                validateNode(array[0])\r\n                && (Array.isArray(array[1]) || array[1] === null)\r\n                && Array.isArray(array[2])  \r\n            )\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }else{\r\n        return false\r\n    } \r\n}\r\n\r\nconst validateArray = (array) => {\r\n    let flag = true\r\n    if(validateSingleArray(array)){\r\n        if(array.length === 2)\r\n            return validateArray(array[1])\r\n        if(array.length  === 3 ){\r\n            if(Array.isArray(array[1])){\r\n                return validateArray(array[1]) &&  validateArray(array[2])\r\n            }\r\n            else{\r\n                return validateArray(array[2])\r\n            }\r\n        }\r\n    }else flag = false\r\n    return flag\r\n}\r\n\r\nconst createDataStrcuture = (array) => {\r\n    let id\r\n    let left\r\n    let right\r\n\r\n    switch (array.length) {\r\n        case 1:\r\n            id = array[0]\r\n            left = null\r\n            right = null\r\n            break;\r\n        case 2:\r\n            id = array[0]\r\n            left = createDataStrcuture((array[1]))\r\n            right = null\r\n            break;\r\n        case 3:\r\n            id = array[0]\r\n            left = Array.isArray(array[1]) ? createDataStrcuture((array[1])) :  null\r\n            right = createDataStrcuture((array[2]))\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return new TreeNode(id,left,right)\r\n}\r\n\r\nconst parseArray = (array) =>{\r\n    if(validateArray(array)) return JSON.stringify(createDataStrcuture(array),null,2)\r\n    else return false\r\n}\r\n\r\nexport default parseArray;","import React, { useEffect } from \"react\"\r\nimport PropTypes from 'prop-types'\r\n\r\nimport \"../styles/inputArray.css\"\r\nimport parseArray from '../utils/transformArray.js'\r\nimport sampleData1 from \"../sampleData/sampleTreeArray1.json\"\r\nimport sampleData2 from \"../sampleData/sampleTreeArray2.json\"\r\n\r\nconst InputArray = ( {\r\n    inputArr,\r\n    inputArrError,\r\n    setInputArr,\r\n    setInputArrError,\r\n    setInputJson\r\n} ) => {\r\n\r\n    const handleSetFieldInputArr = (event) => {\r\n        setInputArr(event.target.value)\r\n    }\r\n\r\n    const handleSetFieldsetInputArrError = (value) => {\r\n        setInputArrError(value)\r\n    }\r\n    \r\n    const handleFillSampleData1 = () => {\r\n        setInputArr(JSON.stringify(sampleData1))\r\n    }\r\n\r\n    const handleFillSampleData2 = () => {\r\n        setInputArr(JSON.stringify(sampleData2))\r\n    }\r\n\r\n    const handleFetch = () => {\r\n        try {\r\n            const parse = parseArray(JSON.parse(inputArr))\r\n            if(parse) setInputJson(parse)\r\n            else handleSetFieldsetInputArrError(true)\r\n        } catch(e) {\r\n            handleSetFieldsetInputArrError(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSetFieldsetInputArrError(false)\r\n    }, [inputArr])\r\n\r\n    return (\r\n        <div className=\"content-wrapper\">\r\n            <div className=\"content\">\r\n                <h1>Process the input into a tree</h1>\r\n                <label htmlFor=\"input_array\">Tree source</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"input_array\"\r\n                    name=\"input_array\"\r\n                    className={inputArrError? \"inputError\" : \"\"}\r\n                    value={inputArr || \"\"}\r\n                    onChange={handleSetFieldInputArr}\r\n                />\r\n                <div className=\"spanBox\">\r\n                    {inputArrError &&\r\n                        <span>Parse error, please check the input and try again</span>\r\n                    }\r\n                </div>\r\n                <button \r\n                    onClick={handleFetch}\r\n                    disabled = {!inputArr}\r\n                >Fetch</button>\r\n                <button \r\n                    className=\"secondaryButton\"\r\n                    onClick={handleFillSampleData1}\r\n                >\r\n                    Sample data 1\r\n                </button>\r\n                <button \r\n                    className=\"secondaryButton\"\r\n                    onClick={handleFillSampleData2}\r\n                >\r\n                    Sample data 2\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nInputArray.propTypes = {\r\n    inputArr: PropTypes.string,\r\n    inputArrError: PropTypes.bool,\r\n    setInputArr: PropTypes.func,\r\n    setInputArrError: PropTypes.func,\r\n    setInputJson: PropTypes.func,\r\n}\r\n\r\nexport default InputArray;","import TreeNode from './treeNode';\r\n\r\nconst validateNode = (element) => {\r\n    if(typeof element === \"string\" || typeof element === \"number\"){\r\n        return true\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\nconst validateSingleKey = (object) => {\r\n    if(typeof object === \"object\"){\r\n        let keys = Object.keys(object)\r\n        let values = Object.values(object)\r\n        if(keys.length === 1){\r\n            if(keys[0] === \"id\" ){\r\n                return validateNode(values[0])\r\n            }else{\r\n                return false\r\n            }\r\n        }else if(keys.length === 2){\r\n            if(keys[0] === \"id\" &&  keys[1]=== \"left\"){\r\n                return validateNode(values[0]) && typeof values[1] === \"object\"\r\n            }else{\r\n                return false\r\n            }\r\n        }else if(keys.length === 3){\r\n            if(keys[0] === \"id\" &&  keys[1]=== \"left\" &&  keys[2]=== \"right\"){\r\n                return (validateNode(values[0]) \r\n                && (typeof values[1] === \"object\" || values[1] === null)\r\n                && typeof values[2] === \"object\" )\r\n            }else{\r\n                return false\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\nconst validateJson = (json) =>{\r\n    let flag = true\r\n    if(validateSingleKey(json)){\r\n        let keys = Object.keys(json)\r\n        let values = Object.values(json)\r\n        if(keys.length === 2)\r\n            return validateJson(values[1])\r\n        if(keys.length  === 3 ){\r\n            if(values[1] !== null){\r\n                return validateJson(values[1]) &&  validateJson(values[2])\r\n            }\r\n            else{\r\n                return validateJson(values[2])\r\n            }\r\n        }\r\n    }else flag = false\r\n    return flag\r\n}\r\n\r\nconst createDataStrcuture = (json) => {\r\n    let id\r\n    let left\r\n    let right\r\n    let keys = Object.keys(json)\r\n    let values = Object.values(json)\r\n    \r\n    switch (keys.length) {\r\n        case 1:\r\n            id = values[0]\r\n            left = null\r\n            right = null\r\n            break;\r\n        case 2:\r\n            id = values[0]\r\n            left = createDataStrcuture((values[1]))\r\n            right = null\r\n            break;\r\n        case 3:\r\n            id = values[0]\r\n            left = values[1] != null ? createDataStrcuture((values[1])) :  null\r\n            right = createDataStrcuture((values[2]))\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return new TreeNode(id,left,right)\r\n}\r\n\r\nconst parseJson = (json) =>{\r\n    try {\r\n        const pJson = JSON.parse(json)\r\n        if(validateJson(pJson)){\r\n            return createDataStrcuture(pJson);\r\n        }else{\r\n            return false;\r\n        }\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default parseJson;","import React, { useEffect } from \"react\"\r\nimport PropTypes from 'prop-types'\r\n\r\nimport '../styles/outputJson.css'\r\nimport parseJson from '../utils/transformJson.js'\r\n\r\nconst OutputJson = ( {\r\n    inputJson,\r\n    inputJsonError,\r\n    setInputJson,\r\n    setInputJsonError,\r\n    setBinTree\r\n} ) => {\r\n\r\n    const handleSetFieldInputJson = (event) => {\r\n        setInputJson(event.target.value)\r\n    }\r\n\r\n    const handleSetFieldsetInputArrError = (value) => {\r\n        setInputJsonError(value)\r\n    }\r\n\r\n    const handleProcessJson = () => {\r\n        const binTree = parseJson(inputJson)\r\n        if(binTree) setBinTree(binTree)\r\n        else handleSetFieldsetInputArrError(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSetFieldsetInputArrError(false)\r\n    }, [inputJson])\r\n\r\n    return (\r\n        <div className=\"content-wrapper\">\r\n            <div className=\"content\">\r\n                <label htmlFor=\"output_json\">Tree text</label>\r\n                <textarea \r\n                    id=\"output_json\" \r\n                    rows=\"10\" \r\n                    name=\"output_json\"\r\n                    value={inputJson}\r\n                    onChange={handleSetFieldInputJson}\r\n                    className={inputJsonError? \"inputError\" : \"\"}\r\n                />\r\n                 <div className=\"spanBox\">\r\n                    {inputJsonError &&\r\n                        <span>Parse error, please check the input and try again</span>\r\n                    }\r\n                </div>\r\n                <button \r\n                    disabled={!inputJson}\r\n                    onClick={handleProcessJson}\r\n                >\r\n                    Process\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nOutputJson.propTypes = {\r\n    inputJson: PropTypes.string,\r\n    inputJsonError: PropTypes.bool,\r\n    setInputJson: PropTypes.func,\r\n    setInputJsonError: PropTypes.func,\r\n    setBinTree: PropTypes.func\r\n}\r\n\r\nexport default OutputJson;","import React from \"react\"\r\nimport PropTypes from 'prop-types'\r\n\r\nimport \"../styles/output.css\"\r\n\r\nconst Output = ( {binTree}) => {\r\n    \r\n    const parseBinTree = ( node ) =>{\r\n        const id = node?.id\r\n        const left = node?.left\r\n        const right = node?.right\r\n        const isDeepest = node?.isDeepest\r\n\r\n        return(\r\n            <div className={isDeepest ? \"parentDeepst\" : \"parent\"} >\r\n                {node &&\r\n                    <>\r\n                        <p className=\"id\">{id}</p>\r\n                        {(left || right) &&\r\n                            <div className=\"children\">\r\n                                <div>\r\n                                    {parseBinTree(left)}\r\n                                </div>\r\n                                <div>\r\n                                    {parseBinTree(right)}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content-wrapper\">\r\n            <div className=\"content\">\r\n                <h1>Output</h1>\r\n                <div className=\"outputArea\">\r\n                    {binTree && binTree.getDeeperNode()}\r\n                    {binTree && parseBinTree(binTree)}\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nOutput.propTypes = {\r\n    binTree: PropTypes.object\r\n}\r\n\r\nexport default Output;","import React from \"react\"\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\r\nimport EmailIcon from '@material-ui/icons/Email'\r\n\r\nimport \"../styles/footer.css\"\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"footer-wrapper\">\r\n            <div className=\"footer\">\r\n                <h3>Ing. Jean Vega Díaz</h3>\r\n                <div className=\"iconsBox\">\r\n                    <p>\r\n                        <a \r\n                            href=\"https://github.com/JeanVegaD\"\r\n                            target=\"_blank\"\r\n                        >\r\n                            <GitHubIcon />\r\n                        </a>\r\n                    </p>\r\n                    <p>\r\n                        <a \r\n                            href=\"https://www.linkedin.com/in/jeanvegad/\"\r\n                            target=\"_blank\"\r\n                        >\r\n                            <LinkedInIcon />\r\n                        </a>\r\n                    </p>\r\n                    <p>\r\n                        <a \r\n                            href=\"mailto: jean0798@gmail.com\"\r\n                            target=\"_blank\"\r\n                        >\r\n                            <EmailIcon />\r\n                        </a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useState } from \"react\"\r\nimport '../styles/index.css'\r\n\r\nimport Header from '../components/header.js'\r\nimport InputArray from '../components/inputArray.js'\r\nimport OutputJson from '../components/outputJson.js'\r\nimport Output from '../components/output.js'\r\nimport Footer from '../components/footer.js'\r\n\r\nconst App = () => {\r\n    const [inputArr, setInputArr] = useState('')\r\n    const [inputArrError, setInputArrError] = useState(false)\r\n    const [inputJson, setInputJson] = useState('')\r\n    const [inputJsonError, setInputJsonError] = useState(false)\r\n    const [binTree, setBinTree] = useState()\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <InputArray \r\n                inputArr = {inputArr}\r\n                inputArrError = {inputArrError}\r\n                setInputArr = {setInputArr}\r\n                setInputArrError = {setInputArrError}\r\n                setInputJson={setInputJson}\r\n            />\r\n            <OutputJson \r\n                 inputJson = {inputJson}\r\n                 inputJsonError = {inputJsonError}\r\n                 setInputJson = {setInputJson}\r\n                 setInputJsonError = {setInputJsonError}\r\n                 setBinTree = {setBinTree}\r\n            />\r\n            <Output \r\n                binTree={binTree}\r\n            />\r\n            <Footer />\r\n        </>      \r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/index';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}